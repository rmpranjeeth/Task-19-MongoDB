{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 1. Find all the information about each products\
\
Ans: db.product.find(\{\})\
\
2. Find the product price which are between 400 to 800\
\
Ans : db.product.find(\{'product_price': \{$gt: 400, $lt: 800\}\})\
\
3. Find the product price which are not between 400 to 600\
\
Ans : db.product.find(\{"product_price": \{$not: \{$gt: 400, $lt: 600\}\}\})\
\
4. List the four product which are grater than 500 in price\
Ans : db.product.find(\{'product_price': \{$gte: 500\}\}) \
\
\
5. Find the product name and product material of each products\
\
Ans : db.products.find(\{\}, \{ _id: 0, product_name: 1, product_material: 1 \})\
\
6. Find the product with a row id of 10\
\
Ans : db.product.find(\{'id':"10"\})\
\
7. Find only the product name and product material\
\
Ans : db.products.find(\{ id: "1" \},\{ product_name: 1, product_material: 1, _id: 0 \});\
\
8. Find all products which contain the value of soft in product material \
\
Ans : db.product.find(\{ "product_material": "Soft"\})\
\
9. Find products which contain product color indigo and product price 492\
Ans : db.product.find(\{ "product_color" : "indigo", "product_price":492\})\
\
10.Delete the products which product price value are same\
\
Ans : db.products.aggregate([\
    \{ $group: \{ _id: "$product_price", count: \{ $sum: 1 \} \} \},\
    \{ $match: \{ count: \{ $gt: 1 \} \} \},\
  ])\
  .forEach((doc) => \{\
    db.products.remove(\{ product_price: doc._id \});\
  \});}